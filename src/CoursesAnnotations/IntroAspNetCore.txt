# Net CLI

# Command Line Interface (CLI)

---

# Intro

# terminal : cmd || powershell 

# commands

dotnet [ help ]
dotnet [ command ] --help

---

# Gerenciamento de versões (.Net CLI)

# Obs.: cuidar com versões sem suporte ou sem LTS.

# Arquivo global.json 
Pasta raiz do projeto (solution)
Possui a versão do sdk utilizado na aplicação

# Pasta física do sdk (estrutura e arquivos) cmd : dotnet --info
Verificar diretorio do topico: .NET SDKs installed

# commands

dotnet [ --info ]

---

# Interfaces 

# Interfaces do ASP.Net Core

---

# IConfiguration : responsável por gerenciar as constraints(restrições) do ASP.Net Core. Declarado no construtor da classe Startup, esse é um exemplo também de injeção de dependencia.

Configuration.GetConnectionString("keyAppSettings")

# IServiceColletion :  Representa um contrato para uma coleção de serviços. Essa interface é estendida por classes que implementam Middlewares através do recurso de injeção de dependência. Declarado por exemplo no método ConfigureServices da classe Startup. Adiciona items ao pipeline do .Net Core.

services.AddDbContext
services.Identity
services.AddMvc

# IApplicationBuilder : Representa um contrato para classes que irão prover mecanismos de configuração de um Middleware. Essa interface é estendida por classes que implementam metodos de configuração para cada Middleware. Configura e habilita os comportamentos dos items da pipeline da aplicação. Declarado no método Configure da classe Startup.

Obs.: A aplicação .Net Core é uma solução limpa onde é implementado os items e modelado a forma do comportamento da aplicação.

app.UseAlgumaCoisa

# IHostEnvironment : Fornece informações sobre o ambiente de hospidagem Web em que uma aplicação está sendo executada.

# Ambiente dev

env.IsDevelopment
app.UseDeveloperExceptionPage();
app.UseDatabaseErrorPage();

# Ambiente prod

app.UseExceptionHandler("/Home/Error");
app.UseHsts();

---

# Projects

# Tipos de projetos com Framework ASP.NET Core 

---

# Intro

# Templates de projetos pré moldados

---

# Projetos

# Razor (sites) 

Razor [ MVC ] : Utiliza o padrão de projeto MVC com o view (Razor).
Razor [ Razor Pages ] : Utiliza todas as ferramentas do Razor.
Razor [ Razor Library ] : Criação de interfaces reutilizáveis.

#Services

Services [ Web API ] : não possui view, implementa o padrão Rest utilizando a comunicação HTTP. Respeitando a componentização do MVC (model, view, controller).

Services [ SignalR ] : Componente do ASP.Net focado em comunicação em tempo real (chats, mensagens, notificações).

#SPA (single page application)

SPA [ Angular | React ] : Solução MVC com comunicação ao frontend via Rest API.
SPA [ Blazor ] : Em desenvolvimento utiizando o Razor. Web Assembly.

# Identity

Identity : Componente para trabalhar com gerenciamento do usuário. Todas as tecnologias utilizam o Identity.

---

# Extra

.Net Core SDK (para desenvolver aplicações)
.Net Core Runtime (somente para rodar uma aplicação, ex.: server de produção)

LTS - Long-term support
	> Somente versões correntes e posteriores do LTS serão suportadas, as demais não terão suporte.
	> Aproximadamente 5 anos de suporte